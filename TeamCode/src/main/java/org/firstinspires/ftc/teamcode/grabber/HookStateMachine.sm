%class HookController
%package org.firstinspires.ftc.teamcode.hook
// http://smc.sourceforge.net/
%start HookStateMachine::Start

/**
This is a small state machine for controlling the front hook assembly to handle the following
sequence actions:
1. Calibrating the hook motor encoder position at startup.
2. Changing hook positions.
3. Grabbing, raising, and releasing a ring in a controlled sequence.
**/
%map HookStateMachine
%%
    Start
    {
        evInitialize [ctxt.getHookPosition() == Hook.HOOK_POSITION_UNKNOWN] jump(Calibrate::Start) { }

        evInitialize [ctxt.getHookPosition() == Hook.HOOK_POSITION_RETRACTED] jump(Run::Retracted) {}
        evInitialize [ctxt.getHookPosition() == Hook.HOOK_POSITION_LOWERED] jump(Run::Lowered) {}
        evInitialize [ctxt.getHookPosition() == Hook.HOOK_POSITION_VERTICAL] jump(Run::Vertical) {}
    }
    Default
    {

    }
%%

// Run state machine once the hook position is unknown.  All maneuvers occur within the
// context of this machine
%map Run
%%
    Vertical
    {
    }
    Lowered
    {
    }
    Retracted
    {
    }
    Default
    {

    }
%%

// StateMachine for calibration sequence.  On entry the hook position is
// unknown.  On exit, the hook is vertical.
%map Calibrate
%%
    Start
        Entry {
            // Set the hook position to retracted
            setHookPosition(Hook.HOOK_POSITION_RETRACTED);
        }
    {
        evRetractTimeoutError  CalibrateError {  }
        evLimitSwitchClosed jump(Run::Retracted) { }
    }

    CalibrateError
    {
        // Send a telemetry message for the error.  Nothing we can do here to recover
    }

    Default
    {

    }
%%
