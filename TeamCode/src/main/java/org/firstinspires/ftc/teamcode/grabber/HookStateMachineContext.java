/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : HookStateMachine.sm
 */

package org.firstinspires.ftc.teamcode.grabber;


public class HookStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public HookStateMachineContext(HookController owner)
    {
        this (owner, HookStateMachine.Start);
    }

    public HookStateMachineContext(HookController owner, HookControllerState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void evInitialize()
    {
        _transition = "evInitialize";
        getState().evInitialize(this);
        _transition = "";
        return;
    }

    public void evLimitSwitchClosed()
    {
        _transition = "evLimitSwitchClosed";
        getState().evLimitSwitchClosed(this);
        _transition = "";
        return;
    }

    public void evRetractTimeoutError()
    {
        _transition = "evRetractTimeoutError";
        getState().evRetractTimeoutError(this);
        _transition = "";
        return;
    }

    public HookControllerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((HookControllerState) _state);
    }

    protected HookController getOwner()
    {
        return (_owner);
    }

    public void setOwner(HookController owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private HookController _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class HookControllerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected HookControllerState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(HookStateMachineContext context) {}
        protected void exit(HookStateMachineContext context) {}

        protected void evInitialize(HookStateMachineContext context)
        {
            Default(context);
        }

        protected void evLimitSwitchClosed(HookStateMachineContext context)
        {
            Default(context);
        }

        protected void evRetractTimeoutError(HookStateMachineContext context)
        {
            Default(context);
        }

        protected void Default(HookStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class HookStateMachine
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final HookStateMachine_Start Start =
            new HookStateMachine_Start("HookStateMachine.Start", 0);
    }

    protected static class HookStateMachine_Default
        extends HookControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected HookStateMachine_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class HookStateMachine_Start
        extends HookStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private HookStateMachine_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evInitialize(HookStateMachineContext context)
        {
            HookController ctxt = context.getOwner();

            if (ctxt.getHookPosition() == Grabber.HOOK_POSITION_UNKNOWN)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Calibrate.Start);
                (context.getState()).entry(context);
            }
            else if (ctxt.getHookPosition() == Grabber.HOOK_POSITION_RETRACTED)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Run.Retracted);
                (context.getState()).entry(context);
            }
            else if (ctxt.getHookPosition() == Grabber.HOOK_POSITION_LOWERED)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Run.Lowered);
                (context.getState()).entry(context);
            }
            else if (ctxt.getHookPosition() == Grabber.HOOK_POSITION_VERTICAL)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(Run.Vertical);
                (context.getState()).entry(context);
            }            else
            {
                super.evInitialize(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class Run
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final Run_Vertical Vertical =
            new Run_Vertical("Run.Vertical", 1);
        public static final Run_Lowered Lowered =
            new Run_Lowered("Run.Lowered", 2);
        public static final Run_Retracted Retracted =
            new Run_Retracted("Run.Retracted", 3);
    }

    protected static class Run_Default
        extends HookControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected Run_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Run_Vertical
        extends Run_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Run_Vertical(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Run_Lowered
        extends Run_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Run_Lowered(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Run_Retracted
        extends Run_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Run_Retracted(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class Calibrate
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final Calibrate_Start Start =
            new Calibrate_Start("Calibrate.Start", 4);
        public static final Calibrate_CalibrateError CalibrateError =
            new Calibrate_CalibrateError("Calibrate.CalibrateError", 5);
    }

    protected static class Calibrate_Default
        extends HookControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected Calibrate_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Calibrate_Start
        extends Calibrate_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Calibrate_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(HookStateMachineContext context)
            {
                HookController ctxt = context.getOwner();

            ctxt.setHookPosition(Grabber.HOOK_POSITION_RETRACTED);
            return;
        }

        @Override
        protected void evLimitSwitchClosed(HookStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(Run.Retracted);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evRetractTimeoutError(HookStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(Calibrate.CalibrateError);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class Calibrate_CalibrateError
        extends Calibrate_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private Calibrate_CalibrateError(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
