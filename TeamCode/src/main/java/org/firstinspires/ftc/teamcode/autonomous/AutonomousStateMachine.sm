%class AutonomousController
%package org.firstinspires.ftc.teamcode.autonomous
// http://smc.sourceforge.net/
%start AutonomousStateMachine::Idle

// StateMachine for Autonomous sequence
// 1.  Wobble goal is hanging off robot hld by gripper
// 2. Touching the wall
// 3. Right edge of robot is on the left starting line.
%map AutonomousStateMachine
%%
    Idle
    {
        evStart MoveForward { }
//          evStart jump(OneRingSequence::Start) {}
    }
    // Start of moving to measure the rings
    // then jump to the specific sequence for the ring condition.
    MoveForward
        Entry {
            // Move forward to the front of the stacker stack
            moveStraight(24d);
        }
    {
        // On move complete, go to measure the ring
        evMoveComplete MeasureRing {  }
    }
//    StrafeLeftToMeasure
//        Entry{
//            // Move left slightly to center on the starter stack
//            strafe(-2d);
//        }
//    {
//        evStrafeComplete MeasureRing {}
//    }
    MeasureRing
        Entry {
            // Activate the ring detector on entry
            activateRingDetector();
            // Start a failsoft timer after 3 seconds and default to 4 rings to avoid
            // running over them if there happens to be more than one.  It appears
            // that this won't be necessary as the camera is workign properly
            startTimer(3000);
            // and start the averaging measurement
            startRingsMeasurement();
        }
        Exit {
            // Shut off the ring detector since we don't need it any more.
            deactivateRingDetector();
        }
    {
        evNoRings jump(OneRingSequence::Start) { }
        evOneRing jump(OneRingSequence::Start)  { }
    //        evFourRings jump(FourRingsSequence::Start) { }
        evFourRings jump(OneRingSequence::Start) { }
        evTimeoutComplete jump(FourRingsSequence::Start) { }
    }
    Stop
        Entry {
            stop();
        }
    {
    }
%%

// Sub-state machine for NoRingSequence where we have to drop the wobble goal
// in Square A.
%map NoRingSequence
%%
    Start
        Entry{
            // Move straight 49" to the center line.
            moveStraight(49d);
        }
    {
        evMoveComplete RotateToSquareA { }
    }

    RotateToSquareA
        Entry{
            // Rotate 90 degrees to the left
            rotateToHeading(-90);
        }
    {
        // After rotation complete, move forward 6"
        evRotationComplete nil { moveStraight(6d); }

        // Once the move is complete, then
        evMoveComplete DropWobbleGoal { }
    }
    DropWobbleGoal
        Entry{
            // just open the grabber to drop
            // the wobble goal in the square and wait for 1/2 second before
            // moving away to shoot the ring.
            openGrabber();
            startTimer(500);
        }
    {
        // After the delay, activate the shooter to get the wheels moving (now that
        // the wobble goal is out of the way), then move to make the power shot
        evTimeout MoveToPowerShot { activateShooter(); }
    }

    MoveToPowerShot
        Entry {
            // Move backward 36 inches
            moveStraight(-36d);
        }
    {
        // After backward move, then rotate back to heading 0 toward the power shot
        evMoveComplete nil { rotateToHeading(0); }
        // After rotation complete, then move and shoot
        evRotationComplete ShootPowerShot {}
    }

    ShootPowerShot
        Entry{
            // Back up to behind the white line
            moveStraight(-12d);
        }
    {
        // After backup complete, then shoot and start a 2 second timer before moving to the white
        // line
        evMoveComplete nil { shootRing();  startTimer(2000); }

        // After timer complets, sho, move forward 12" to park over the white line and go to end state
        evTimeout MoveToWhiteLine { }
    }
    MoveToWhiteLine
        Entry{
            moveStraight(12d);
        }
    {
        evMoveComplete Stop { }
    }
    /*
    * Final state
    */
    Stop
        Entry{
            stop();
        }
    {

    }
%%

//-------------------------------------------------------------------------------
// Sub-state machine for OneRingSequence where we have to drop the wobble goal
// in Square B.
//-------------------------------------------------------------------------------
%map OneRingSequence
%%
    Start
        Entry{
            // strafe right to go around the ring and not hit the left wobble goal (by going left instead)
            strafe(18d);
        }
    {
        evStrafeComplete GotoSquareB { }
    }

    GotoSquareB
        Entry{
            // go forward to to right of square B
            moveStraight(72d);
        }
    {
        // After move complete, then rotate 90 to left to point into square b
        evMoveComplete nil {  rotateToHeading(-90); }
        evRotationComplete MoveIntoSquareB { }
    }

    MoveIntoSquareB
        Entry{
            moveStraight(6d);
        }
    {
        evMoveComplete DropWobbleGoal { }
    }

    DropWobbleGoal
        Entry{
            // just open the grabber to drop
            // the wobble goal in the square and wait for 1/2 second before
            // moving away to shoot the ring.
            openGrabber();
            startTimer(500);
        }
    {
        // After the timeout, move back 6" to be able to clear the wobble goal
         evTimeout nil { moveStraight(-6d); }
        evMoveComplete RotateToGoal { }
    }
    RotateToGoal
        Entry {
            // rotate back to heading 0 to face the goal
            rotateToHeading(0);
            // And activte the shooter
            activateShooter();
        }
    {
        // After orienting toward the goal, move straight backward behind the white line
        evRotationComplete nil { moveStraight(-36d);  }
        evMoveComplete DoPowerShot { }
    }

    DoPowerShot
        Entry {
            shootRing();
            startTimer(2000);
        }
    {
        // After timer completes, move forward 12" to park over the white line and go to end state
        evTimeout MoveToWhiteLine { }
    }

    MoveToWhiteLine
        Entry{
            moveStraight(12d);
        }
    {
        evMoveComplete Stop { }
    }
    // Final state for OneRing
    Stop
        Entry{
            stop();
    }
    {
}
%%

//----------------------------------------------------------------------------------
// Sub-state machine for FourRingSequence where we have to drop the wobble goal
// in Square C.
//-----------------------------------------------------------------------------------
%map FourRingsSequence
%%
    Start
        Entry{
            // strafe left to get around ring
            strafe(-24d);
        }
    {
        evStrafeComplete GotoSquareB { }
    }

    GotoSquareB
        Entry{
            // go forward to to left of square B
            moveStraight(73d);
        }
    {
        // After move complete, then rotate 90 to right to point into square b
        evMoveComplete nil {  rotateToHeading(90); }
        evRotationComplete MoveIntoSquareB { }
    }

    MoveIntoSquareB
        Entry{
            moveStraight(6d);
        }
{
evMoveComplete DropWobbleGoal { }
}

DropWobbleGoal
Entry{
// just open the grabber to drop
// the wobble goal in the square and wait for 1/2 second before
// moving away to shoot the ring.
openGrabber();
startTimer(500);
}
{
// After the timeout, move back 6" to be able to clear the wobble goal
evTimeout nil { moveStraight(-6d); }
evMoveComplete RotateToGoal { }
}
RotateToGoal
Entry {
// rotate back to heading 0 to face the goal
rotateToHeading(0);
// And activte the shooter
activateShooter();
}
{
// After orienting toward the goal, then move straight backward behind the white line
evRotationComplete nil { moveStraight(-36d);  }
evMoveComplete StrafeToPowerShot { }
}
StrafeToPowerShot
Entry {
// There's a bug somehow that skips the strafe state so start a timer to wait one second
// before beginning strafe. TODO - NEED TO FIX THIS
startTimer(1000);
}
{
// After strafe complete, then start a 2 second timer before moving to the white line
evStrafeComplete DoPowerShot { }
// Strafe to right 24" to line up for power shot
evTimeout nil {  strafe(24);  }
}
DoPowerShot
Entry {
shootRing();
startTimer(2000);
}
{
// After timer complets, move forward 12" to park over the white line and go to end state
evTimeout MoveToWhiteLine { }
}

MoveToWhiteLine
Entry{
moveStraight(12d);
}
{
evMoveComplete Stop { }
}
// Final state for OneRing
Stop
Entry{
stop();
}
{
}
%%
