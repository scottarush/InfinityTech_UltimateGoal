%class AutonomousController
%package org.firstinspires.ftc.teamcode.autonomous
// http://smc.sourceforge.net/
%start AutonomousStateMachine::Idle

// StateMachine for Autonomous sequence
// 1.  Wobble goal is hanging off robot hld by gripper
// 2. Touching the wall
%map AutonomousStateMachine
%%
    Idle
    {
        evStart Start { }
    }
    // Start of moving to measure the rings
    // then jump to the specific sequence for the ring condition.
    Start
        Entry {
            // Move forward to within 6" of the rings
            moveStraight(22d);
            //rotateToHeading(270);
        }
    {
        // On move complete, go to measure the ring
        evMoveComplete MeasureRing {  }
       // evRotateComplete Stop { }
    }

    MeasureRing
        Entry {
            // Activate the ring detector on entry
            activateRingDetector();
            // Start a failsoft timer after 3 seconds and default to 4 rings to avoid
            // running over them if there happens to be more than one.  It appears
            // that this won't be necessary as the camera is workign properly
            startTimer(3000);
            // and start the averaging measurement
            startRingsMeasurement();
        }
        Exit {
            // Shut off the ring detector since we don't need it any more.
            deactivateRingDetector();
        }
    {
        evNoRings jump(NoRingSequence::Start) { }
        evOneRing jump(OneRingSequence::Start)  { }
        evFourRings jump(FourRingsSequence::Start) { }
        evTimeoutComplete jump(NoRingSequence::Start) { }
    }
    Stop
        Entry {
            stop();
        }
    {
    }
%%

// Sub-state machine for NoRingSequence where we have to drop the wobble goal
// in Square A.
%map NoRingSequence
%%
    Start
        Entry{
            // Move straight 49" to the center line.
            moveStraight(49d);
        }
    {
        evMoveComplete RotateToSquareA { }
    }

    RotateToSquareA
        Entry{
            // Rotate 90 degrees to the left
            rotateToHeading(-90);
        }
    {
        // After rotation complete, move forward 6"
        evRotationComplete nil { moveStraight(-6d); }

        // Once the move is complete, then just open the grabber to drop
        // the wobble goal in the square and wait for 1/2 second before
        // moving away to shoot the ring.
        evMoveComplete nil { openGrabber();
                             startTimer(500);  }
        // After the delay, activate the shooter to get the wheels moving (now that
        // the wobble goal is out of the way), then move and shoot the power shot
        evTimeoutComplete RotateToPowerShot { activateShooter(); }
    }

    RotateToPowerShot
        Entry {
            // Move backward 36 inches
            moveStraight(-36d);
        }
    {
        // After backward move, then rotate back to heading 0 toward the power shot
        evMoveComplete nil { rotateToHeading(0); }
        // After rotation complete, then move and shoot
        evRotationComplete ShootPowerShot {}
    }

    ShootPowerShot
        Entry{
            // Back up to behind the white line
            moveStraight(-12d);
        }
    {
        // After backup complete, then shoot and start a 2 second timer before moving to the white
        // line
        evMoveComplete nil { shootRing();  startTimer(2000); }

        // After timer complets, sho, move forward 12" to park over the white line and go to end state
        evTimeoutComplete MoveToWhiteLine { }
    }
    MoveToWhiteLine
        Entry{
            moveStraight(12d);
        }
    {
        evMoveComplete Stop { }
    }
    /*
    * Final state
    */
    Stop
        Entry{
            stop();
        }
    {

    }
%%
// Sub-state machine for OneRingSequence where we have to drop the wobble goal
// in Square B.
%map OneRingSequence
%%
Start
Entry{
    // Move straight 49" to the center line.
    moveStraight(49d);
    }
    {
    evMoveComplete RotateToSquareA { }
    }

    RotateToSquareA
    Entry{
    // Rotate 90 degrees to the left
    rotateToHeading(-90);
    }
    {
    // After rotation complete, move forward 6"
    evRotationComplete nil { moveStraight(-6d); }

    // Once the move is complete, then just open the grabber to drop
    // the wobble goal in the square and wait for 1/2 second before
    // moving away to shoot the ring.
    evMoveComplete nil { openGrabber();
    startTimer(500);  }
    // After the delay, activate the shooter to get the wheels moving (now that
    // the wobble goal is out of the way), then move and shoot the power shot
    evTimeoutComplete RotateToPowerShot { activateShooter(); }
    }

RotateToPowerShot
Entry {
// Move backward 36 inches
moveStraight(-36d);
}
{
// After backward move, then rotate back to heading 0 toward the power shot
evMoveComplete nil { rotateToHeading(0); }
// After rotation complete, then move and shoot
evRotationComplete ShootPowerShot {}
}

ShootPowerShot
Entry{
// Back up to behind the white line
moveStraight(-12d);
}
{
// After backup complete, then shoot and start a 2 second timer before moving to the white
// line
evMoveComplete nil { shootRing();  startTimer(2000); }

// After timer complets, sho, move forward 12" to park over the white line and go to end state
evTimeoutComplete MoveToWhiteLine { }
}
MoveToWhiteLine
Entry{
moveStraight(12d);
}
{
evMoveComplete Stop { }
}
/*
    * Final state
    */
Stop
Entry{
stop();
}
{

}
%%

// Sub-state machine for FourRingSequence where we have to drop the wobble goal
// in Square C.
%map FourRingsSequence
%%
Start
Entry{
// Move straight 49" to the center line.
moveStraight(49d);
}
{
evMoveComplete RotateToSquareA { }
}

RotateToSquareA
Entry{
// Rotate to heading
rotateToHeading(270);
}
{
// After rotation complete, move forward 6"
evRotationComplete nil { moveStraight(-6d); }

// Once the move is complete, then just open the grabber to drop
// the wobble goal in the square and wait for 1/2 second before
// moving away to shoot the ring.
evMoveComplete nil { openGrabber();
startTimer(500);  }
// After the delay, activate the shooter to get the wheels moving (now that
// the wobble goal is out of the way), then move and shoot the power shot
evTimeoutComplete RotateToPowerShot { activateShooter(); }
}

RotateToPowerShot
Entry {
// Move backward 36 inches
moveStraight(-36d);
}
{
// After backward move, then rotate back to heading 0 toward the power shot
evMoveComplete nil { rotateToHeading(0); }
// After rotation complete, then move and shoot
evRotationComplete ShootPowerShot {}
}

ShootPowerShot
Entry{
// Back up to behind the white line
moveStraight(-12d);
}
{
// After backup complete, then shoot and start a 2 second timer before moving to the white
// line
evMoveComplete nil { shootRing();  startTimer(2000); }

// After timer complets, sho, move forward 12" to park over the white line and go to end state
evTimeoutComplete MoveToWhiteLine { }
}
MoveToWhiteLine
Entry{
moveStraight(12d);
}
{
evMoveComplete Stop { }
}
/*
    * Final state
    */
Stop
Entry{
stop();
}
{

}
%%

