%class AutonomousController
%package org.firstinspires.ftc.teamcode.autonomous
// http://smc.sourceforge.net/
%start AutonomousStateMachine::Idle

// StateMachine for Autonomous sequence
// 1.  Wobble goal is hanging off robot hld by gripper
// 2. Touching the wall
// 3. Right edge of robot is on the left starting line.
%map AutonomousStateMachine
%%
    Idle
    {
        evStart MoveForward { }
//          evStart jump(OneRingSequence::Start) {}
    }
    // Start of moving to measure the rings
    // then jump to the specific sequence for the ring condition.
    MoveForward
        Entry {
            // Move forward to the front of the stacker on 0 degree target heading
			// 20" forward move leaves the camera about 10" from the stack.  Any
			// closer and we were getting false indications on the single ring stack case
            moveStraight(18d,0);
        }
    {
        // On move complete, go to measure the ring
        evMoveComplete MeasureRing {  }
    }

    MeasureRing
        Entry {
            // Activate the ring detector on entry
            activateRingDetector();
            // Start a failsoft timer after 3 seconds and default to 4 rings to avoid
            // running over them if there happens to be more than one.  It appears
            // that this won't be necessary as the camera is workign properly
            startTimer(3000);
            // and start the averaging measurement
            startRingsMeasurement();
        }
        Exit {
            // Shut off the ring detector since we don't need it any more.
            deactivateRingDetector();
        }
    {
           evNoRings jump(NoRingSequence::Start) { }
        evOneRing jump(OneRingSequence::Start)  { }
       evFourRings jump(FourRingsSequence::Start) { }
        evTimeoutComplete jump(FourRingsSequence::Start) { }
    }
    Stop
        Entry {
            stop();
        }
    {
    }
%%

// Sub-state machine for NoRingSequence where we have to drop the wobble goal
// in Square A.
%map NoRingSequence
%%
    Start
        Entry{
            // Move straight to the center line on a 0 degree heading
            moveStraight(51d,0);
        }
    {
        evMoveComplete RotateToSquareA { }
    }

    RotateToSquareA
        Entry{
            // Rotate to -90 degree heading
            rotateToHeading(-90);
        }
    {
        // After rotation complete, move forward 6" staying on -90 degree target heading
        evRotationComplete nil { moveStraight(6d,-90); }

        // Once the move is complete, then
        evMoveComplete DropWobbleGoal { }
    }
    DropWobbleGoal
        Entry{
            // just open the grabber to drop
            // the wobble goal in the square and wait for 1/2 second before
            // moving away to shoot the ring.
            openGrabber();
            startTimer(500);
        }
    {
        // After the delay, activate the shooter to get the wheels moving (now that
        // the wobble goal is out of the way), then move to make the power shot
        evTimeout MoveToPowerShot { activateShooter(); }
    }

    MoveToPowerShot
        Entry {
            // Move backward 36 inches staying on -90 degree heading
            moveStraight(-36d,-90);
        }
    {
        // After backward move, then rotate back to heading 0 toward the power shot
        evMoveComplete nil { rotateToHeading(0); }
        // After rotation complete, then move and shoot
        evRotationComplete ShootPowerShot {}
    }

    ShootPowerShot
        Entry{
            // Back up to behind the white line pointing on 0 heading
            moveStraight(-12d,0);
        }
    {
        // After backup complete, then shoot and start a 2 second timer before moving to the white
        // line
        evMoveComplete nil { shootRing();  startTimer(2000); }

        // After timer completes, sho, move forward 12" to park over the white line and go to end state
        evTimeout MoveToWhiteLine { }
    }
    MoveToWhiteLine
        Entry{
            moveStraight(12d,0);
        }
    {
        evMoveComplete Stop { }
    }
    /*
    * Final state
    */
    Stop
        Entry{
            stop();
        }
    {

    }
%%

//-------------------------------------------------------------------------------
// Sub-state machine for OneRingSequence where we have to drop the wobble goal
// in Square B.
//-------------------------------------------------------------------------------
%map OneRingSequence
%%
    Start
        Entry{
            // strafe right to go around the ring and not hit the left wobble goal (by going left instead)
			// Stay on 0 degree heading
            strafe(22d,0);
        }
    {
        evStrafeComplete GotoSquareB { }
    }

    GotoSquareB
        Entry{
            // go forward to to right of square B staying on 0 degree heading
            moveStraight(74d,0);
        }
    {
        // After move complete, then rotate to -90 heading pointing into square b
        evMoveComplete nil {  rotateToHeading(-90); }
        evRotationComplete MoveIntoSquareB { }
    }

    MoveIntoSquareB
        Entry{
			// Move forward into square B to drop the goal staying on -90
            moveStraight(6d,-90);
        }
    {
        evMoveComplete DropWobbleGoal { }
    }

    DropWobbleGoal
        Entry{
            // just open the grabber to drop
            // the wobble goal in the square and wait for 1/2 second before
            // moving away to shoot the ring.
            openGrabber();
            startTimer(500);
        }
    {
        // After the timeout, move back 6" to be able to clear the wobble goal
         evTimeout nil { moveStraight(-6d,-90); }
        evMoveComplete RotateToGoal { }
    }
    RotateToGoal
        Entry {
            // rotate back to heading 0 to face the goal
            rotateToHeading(0);
            // And activte the shooter
            activateShooter();
        }
    {
        // After orienting toward the goal, move straight backward behind the white line on 0 heading
        evRotationComplete nil { moveStraight(-36d,0);  }
        evMoveComplete DoPowerShot { }
    }

    DoPowerShot
        Entry {
            shootRing();
            startTimer(2000);
        }
    {
        // After timer completes, move forward 12" to park over the white line and go to end state
        evTimeout MoveToWhiteLine { }
    }

    MoveToWhiteLine
        Entry{
			// Move forward on 0 degree heading
            moveStraight(12d,0);
        }
    {
        evMoveComplete Stop { }
    }
    // Final state for OneRing
    Stop
        Entry{
            stop();
    }
    {
}
%%

//----------------------------------------------------------------------------------
// Sub-state machine for FourRingSequence where we have to drop the wobble goal
// in Square C.
//-----------------------------------------------------------------------------------
%map FourRingsSequence
%%
    Start
        Entry{
            // strafe right to go around the ring and not hit the left wobble goal (by going left instead)
			// and stay on 0 degree heading
            strafe(22d,0);
        }
    {
        evStrafeComplete GotoSquareB { }
    }

    GotoSquareB
        Entry{
            // go forward to 6" beyond the far end of square B
            moveStraight(80d,0);
        }
    {
        // After move complete, then 
        evMoveComplete MoveToColumnOverC { }
    }

    MoveToColumnOverC
        Entry{
			// Strafe left to column C and try to avoid the left hand wall by 8 inches or so
			// Maintain robot heading 0 to try to strafe correct heading
            strafe(-32d,0);
        }
    {
		// After the strafe is complete, then drop the wobble goal
        evStrafeComplete DropWobbleGoal { }
		
    }

    DropWobbleGoal
        Entry{
            // just open the grabber to drop
            // the wobble goal in the square and wait for 1/2 second before
            // moving away to shoot the ring.
            openGrabber();
            startTimer(500);
        }
    {
        // After the timeout, move backward 6" to be able to clear the wobble goal
         evTimeout nil { moveStraight(-6d,0); }
		evMoveComplete StrafeToAlignPowerShot { }
    }
    StrafeToAlignPowerShot
        Entry {
            // strafe right to align at the power shot
            strafe(56d,0);
            // And activate the shooter on the way
            activateShooter();
        }
    {
        evStrafeComplete MoveBehindWhiteLine { }
    }
   MoveBehindWhiteLine
        Entry {
            // move backward to be behind the white line maintaining heading 0
            moveStraight(-56d,0);
            // And activate the shooter on the way
            activateShooter();
        }
    {
        evMoveComplete DoPowerShot { }
    }

    DoPowerShot
        Entry {
            shootRing();
            startTimer(2000);
        }
    {
        // After timer completes, move back park over the white line and go to end state
        evTimeout MoveToWhiteLine { }
    }

    MoveToWhiteLine
        Entry{
            moveStraight(12d,0);
        }
    {
        evMoveComplete Stop { }
    }
    // Final state for FourRingSequence
    Stop
        Entry{
            stop();
    }
    {
}
%%
