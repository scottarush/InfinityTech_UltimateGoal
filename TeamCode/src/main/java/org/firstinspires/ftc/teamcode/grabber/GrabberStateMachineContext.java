/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : GrabberStateMachine.sm
 */

package org.firstinspires.ftc.teamcode.grabber;


public class GrabberStateMachineContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public GrabberStateMachineContext(GrabberController owner)
    {
        this (owner, GrabberStateMachine.Start);
    }

    public GrabberStateMachineContext(GrabberController owner, GrabberControllerState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void evGrabberMoving()
    {
        _transition = "evGrabberMoving";
        getState().evGrabberMoving(this);
        _transition = "";
        return;
    }

    public void evGrabberStopped()
    {
        _transition = "evGrabberStopped";
        getState().evGrabberStopped(this);
        _transition = "";
        return;
    }

    public void evInit()
    {
        _transition = "evInit";
        getState().evInit(this);
        _transition = "";
        return;
    }

    public void evLimitSwitchClosed()
    {
        _transition = "evLimitSwitchClosed";
        getState().evLimitSwitchClosed(this);
        _transition = "";
        return;
    }

    public void evTimeoutError()
    {
        _transition = "evTimeoutError";
        getState().evTimeoutError(this);
        _transition = "";
        return;
    }

    public GrabberControllerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((GrabberControllerState) _state);
    }

    protected GrabberController getOwner()
    {
        return (_owner);
    }

    public void setOwner(GrabberController owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private GrabberController _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class GrabberControllerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected GrabberControllerState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(GrabberStateMachineContext context) {}
        protected void exit(GrabberStateMachineContext context) {}

        protected void evGrabberMoving(GrabberStateMachineContext context)
        {
            Default(context);
        }

        protected void evGrabberStopped(GrabberStateMachineContext context)
        {
            Default(context);
        }

        protected void evInit(GrabberStateMachineContext context)
        {
            Default(context);
        }

        protected void evLimitSwitchClosed(GrabberStateMachineContext context)
        {
            Default(context);
        }

        protected void evTimeoutError(GrabberStateMachineContext context)
        {
            Default(context);
        }

        protected void Default(GrabberStateMachineContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class GrabberStateMachine
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final GrabberStateMachine_Start Start =
            new GrabberStateMachine_Start("GrabberStateMachine.Start", 0);
        public static final GrabberStateMachine_Stopped Stopped =
            new GrabberStateMachine_Stopped("GrabberStateMachine.Stopped", 1);
        public static final GrabberStateMachine_Moving Moving =
            new GrabberStateMachine_Moving("GrabberStateMachine.Moving", 2);
        public static final GrabberStateMachine_Calibrate Calibrate =
            new GrabberStateMachine_Calibrate("GrabberStateMachine.Calibrate", 3);
        public static final GrabberStateMachine_CalibrateError CalibrateError =
            new GrabberStateMachine_CalibrateError("GrabberStateMachine.CalibrateError", 4);
    }

    protected static class GrabberStateMachine_Default
        extends GrabberControllerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected GrabberStateMachine_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GrabberStateMachine_Start
        extends GrabberStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GrabberStateMachine_Start(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evInit(GrabberStateMachineContext context)
        {
            GrabberController ctxt = context.getOwner();

            if (ctxt.getGrabberPosition() == Grabber.GRABBER_POSITION_UNKNOWN)
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(GrabberStateMachine.Calibrate);
                (context.getState()).entry(context);
            }
            else
            {
                super.evInit(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GrabberStateMachine_Stopped
        extends GrabberStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GrabberStateMachine_Stopped(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evGrabberMoving(GrabberStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GrabberStateMachine.Moving);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void evGrabberStopped(GrabberStateMachineContext context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GrabberStateMachine_Moving
        extends GrabberStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GrabberStateMachine_Moving(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void evGrabberMoving(GrabberStateMachineContext context)
        {

            return;
        }

        @Override
        protected void evGrabberStopped(GrabberStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GrabberStateMachine.Stopped);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GrabberStateMachine_Calibrate
        extends GrabberStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GrabberStateMachine_Calibrate(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(GrabberStateMachineContext context)
            {
                GrabberController ctxt = context.getOwner();

            ctxt.setGrabberPosition(Grabber.GRABBER_POSITION_LOWERED);
            ctxt.startTimer(2000);
            return;
        }

        @Override
        protected void evLimitSwitchClosed(GrabberStateMachineContext context)
        {
            GrabberController ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.stopTimer();
            }
            finally
            {
                context.setState(GrabberStateMachine.Stopped);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void evTimeoutError(GrabberStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GrabberStateMachine.CalibrateError);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class GrabberStateMachine_CalibrateError
        extends GrabberStateMachine_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private GrabberStateMachine_CalibrateError(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(GrabberStateMachineContext context)
            {
                GrabberController ctxt = context.getOwner();

            ctxt.setLogMessage("Calibration timer expired before evLimitSwitchClosed received.");
            return;
        }

        @Override
        protected void evLimitSwitchClosed(GrabberStateMachineContext context)
        {

            (context.getState()).exit(context);
            context.setState(GrabberStateMachine.Stopped);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
